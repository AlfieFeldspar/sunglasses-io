swagger: "2.0"
info:
  title: 'Sunglasses API'
  description: 'See your app clearly with the Sunglasses API'
  version: '1.0.0'
# the domain of the service
host: 'api.sunglasses.io'
schemes:
  - 'https'
# will prefix all paths
basePath: '/api'
produces:
  - 'application/json'
  
  
paths:
  /brands:
    get:
      tags: 
        - 'GET/ brands of sunglasses'
      summary: 'Brands of sunglasses sold by Sungasses-io'
      description: |
        The GET brands endpoint returns information about all brands of sunglasses sold by Sunglasses-io. The response includes all of the brand names and their associated ids.
      produces:
      - "application/json"
      responses:
        '200':
          description: 'An array of brands'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Brands'
        '204':
          description: 'There are no brands to return'
          schema:
            $ref: '#/definitions/Error'
            
  /brands/{brandId}/products:
    get:
      tags:
        - 'GET/ products by brand Id'
      summary: 'Sunglasses products sold by Sunglasses-io limited by brand'
      description: |
        The GET products by brand endpoint returns information about all sunglasses products sold by Sunglasses-io limited by a brand. The response includes the brand name, product id, name, description, price, imageUrls, and a categoryId that links the products to their associated brands.
      produces:
      - "application/json"
      parameters:
        - name: 'brandId'
          in: 'path'
          description: 'The id of a brand of sunglasses.'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'An array of products of a certain brand'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Products'
        '204':
          description: 'That brand or product was not found'
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: 'Missing brandId in request'
          schema:
            $ref: '#/definitions/Error'

  /products:
    get:
      tags:
        - 'GET/ products by a search term'
      summary: 'Sunglasses products sold by Sunglasses-io'
      description: |
        The Products endpoint returns information about the sunglasses products offered by Sunglasses-io. If the search term (which will be checked in lower case) is included in one or more product names, those products will be returned. The response includes the product id, name, description, price, imageUrls, and a categoryId that links the products to their associated brands. 
      produces:
      - "application/json"
      parameters:
        - name: 'searchTerm'
          in: 'query'
          description: 'A product search query string.'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'An array of products found by search term'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Products'
        '204':
          description: 'No matching products found. Please search again'
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: 'Search term required. Please try again'
          schema:
            $ref: '#/definitions/Error'
            
  /login:
    post:
      tags:
        - 'POST/ user login'
      summary: "Logs user into the system"
      description: |
        The login endpoint supports user login and returns an access token. 
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful login. Access token generated and number of failed login responses set to 0"
          schema:
            type: "object"
            schema:
            $ref: '#/definitions/AccessToken'
        "400":
          description: "Invalid username or password entry syntax"
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: "Invalid username or password entered"
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: "Forbidden. Too many failed login attempts"
          schema:
            $ref: '#/definitions/Error'
          
  /me/cart:
    get:
      tags: 
        - 'GET/ currentUser cart'
      summary: 'View shopping cart for a validated user'
      description: |
        The GET cart endpoint returns the contents of a validated user's shopping cart. Validation requires that the body of the request contain a valid username and access token. The response includes product id, name, description, price, imageUrls, and a categoryId that links the products to their associated brands. 
      produces:
      - "application/json"
      responses:
        '200':
          description: 'Contents of shopping cart'
          schema:
            type: 'array'
            items: 
              $ref: '#/definitions/Products'
        '401':
          description: "You need valid login credentials to continue"
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
      - 'POST/ product to currentUser cart'
      summary: 'Add product to shopping cart of validated user'
      description: |
        The POST new item to a cart endpoint returns the contents of a validated user's shopping cart, including one new item added as a query parameter. User validation requires that the body of the request contain a valid username and access token. The response includes product id, name, description, price, imageUrls, and a categoryId that links the products to their associated brands.
      produces:
      - "application/json"
      parameters:
        - name: 'productId'
          in: 'query'
          description: 'The numeric ID of a product to add to shopping cart.'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'Contents of shopping cart, including new product'
          schema:
            type: 'array'
            items: 
              $ref: '#/definitions/Products'
        '204'
          description: 'No matching products found. Please search again'
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: 'ProductId required. Please search again'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "You need valid login credentials to continue"
          schema:
            $ref: '#/definitions/Error'

  /me/cart/{productId}:
    delete:
      tags:
        - 'DELETE/ product from currentUser cart'
      summary: 'DELETE product from shopping cart of a validated user'
      description: |
        The DELETE item from a cart endpoint returns the contents of a validated user's shopping cart, minus one deleted product included in the path. User validation requires that the body of the request contain a valid username and access token. The response includes product id, name, description, price, imageUrls, and a categoryId that links the products to their associated brands.
      produces:
      - "application/json"
      parameters:
        - name: 'productId'
          in: 'path'
          description: 'The id of the product to delete'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'Contents of shopping cart, minus deleted product'
          schema:
            type: 'array'
            items: 
              $ref: '#/definitions/Products'
        '204':
          description: 'Cart empty or product not found. No deletion'
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: 'ProductId required'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "You need valid login credentials to continue"
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - 'POST/ a new quantity of an item to currentUser cart'
      summary: 'Add a submitted quantity of an item to the shopping cart of a validated user'
      description: |
         The POST a new quantity of an item in a cart endpoint returns the contents of a validated user's shopping cart, including changes from adding a set amount (a query string) of one product (whose productId is included in the path). User validation requires that the body of the request contain a valid username and access token. The response includes product id, name, description, price, imageUrls, and a categoryId that links the products to their associated brands.
      parameters:
        - name: 'productId'
          in: 'path'
          description: 'The id of the product to change in quantity'
          required: true
          type: 'string'
        - name: 'numberToAdd'
          in: 'query'
          description: 'The number to add to quantity in the cart. If product not already in cart, an amount of product equal to numberToAdd will be added'
          required: true
          type: 'number'
      responses:
        '200':
          description: 'Contents of shopping cart, including additional products'
          schema:
            type: 'array'
            items: 
              $ref: '#/definitions/Products'
        '204':
          description: 'Product not found. No addition'
          schema:
            $ref: '#/definitions/Error'
        '400':
          description: 'ProductId required'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: "You need valid login credentials to continue"
          schema:
            $ref: '#/definitions/Error'
            
definitions:
  AccessToken:
    type: 'object'
    properties: 
      username:
        type: 'string'
        description: 'A valid username'
      lastUpdated:
        type: 'string'
        description: 'The current date/time'
      token:
        type: 'string'
        description: 'A unique auto-generated uid16 token'
  
  Brands:
    type: 'object'
    properties:
      id:
        type: 'string'
        description: 'Unique identifier representing a specific brand. For example, Oakley will have a different id than Ray Ban.'
      name:
        type: 'string'
        description: 'Brand name'

  Error:
    type: 'string'
    properties:
      message:
        type: 'string'
 
  Products:
    type: 'object'
    properties:
      id:
        type: 'string'
        description: 'Unique identifier representing a specific product. For example, Superglasses will have a different product_id than Black Sunglasses.'
      categoryId:
        type: 'string'
        description: 'A linking field that associates a product with a brand. For example, the value in the categoryId field for Superglasses (a product) will match the value in the id field for Oakley (its associated brand).'
      name:
        type: 'string'
        description: 'Display name of product.'
      description:
        type: 'string'
        description: 'Description of product.'
      price:
        type: 'number'
        description: 'Price of product.'
      imageUrls:
        type: 'array'
        description: 'An array of image URLs representing the product.'
        items:
          type: 'string'
          description: 'Image URLs for the product.'
