swagger: "2.0"
info:
  title: 'Sunglasses API'
  description: 'See your app clearly with the Sunglasses API'
  version: '1.0.0'
# the domain of the service
host: 'api.sunglasses.io'
schemes:
  - 'https'
# will prefix all paths
basePath: '/api'
produces:
  - 'application/json'
  
  
paths:
  /brands:
    get:
      tags:
        - 'GET brands'
      summary: 'Brands of sunglasses sold by Sungasses-io'
      description: |
        The GET brands endpoint returns information about all brands of sunglasses sold by Sunglasses-io. The response includes all of the brand names and their associated ids.
      responses:
        '200':
          description: 'An array of brands.'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Brands'
        '204':
          description: '204: There are no brands to return'
          schema:
            $ref: '#/definitions/Error'
            
  /brands/{brandId}/products:
    get:
      tags:
        - 'GET products by brand Id'
      summary: 'Sunglasses products sold by Sunglasses-io limited by brand'
      description: |
        The GET products by brand endpoint returns information about all sunglasses products sold by Sunglasses-io limited by a brand. The response includes the brand name, product id, name, description, price, imageUrls, and a categoryId that links the products to their associated brands.
      parameters:
        - name: 'brandId'
          in: 'path'
          description: 'The id of a brand of sunglasses.'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'An array of products of a certain brand.'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Products'
        '204':
          description: '204: That brand or product was not found'
          schema:
            $ref: '#/definitions/Error'

            
  /products:
    get:
      tags:
        - 'GET products by a search term'
      summary: 'Sunglasses products sold by Sunglasses-io'
      description: |
        The Products endpoint returns information about the sunglasses products offered by Sunglasses-io. If the search term (which will be checked in lower case) is included in one or more product names, those products will be returned. The response includes the product id, name, description, price, imageUrls, and a categoryId that links the products to their associated brands. 
      parameters:
        - name: 'searchTerm'
          in: 'query'
          description: 'A product search query string.'
          required: true
          type: 'string'
      responses:
        '200':
          description: 'Products'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Products'
        '204':
          description: '204: No matching products found. Please search again'
          schema:
            $ref: '#/definitions/Error'
  
  /login:
    post:
      tags:
      - "POST user data to log existing user into the system"
      summary: "Logs user into the system"
      description: "|
      The login endpoint supports user login and generates an access token."
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation. Access token generated and number of failed login responses set to 0"
          schema:
            type: "string"
        "400":
          description: "Invalid username or password entry syntax"
        "401":
          description: "Invalid username or password entered"
          
          
  /me/cart:
    get:
      summary: Goals
      description: |
        The Goals endpoint allows you to search goals based on different filters such as category and popularity as well as a search string
      parameters:
        - name: query
          in: query
          description: Search query string
          required: false
          type: string
        - name: sort
          in: query
          description: The sort type on the response.  
          required: false
          type: array
          items:
            type: string
            enum:
              - upVotes
              - dateCreated
      tags:
        - Goals
      responses:
        '200':
          description: An array of goals
          schema:
            type: string


            
            
  /me/cart:
    post:
      tags:
      - User
      summary: User Profile
      description: >-
        The User Profile endpoint returns information about the Uber user that
        has authorized with the application.
      responses:
        '200':
          description: Profile information for a user
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
            
  /me/cart/{productId}/deleteProductFromCart:
    delete:
      summary: Accept a Goal
      description: |
        This endpoint allows you accept a given goal
      parameters:
        - name: productId
          in: path
          description: The id of the goal to accept
          required: true
          type: string
      tags:
        - User
      responses:
        '200':
          description: Acceptance is successful
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
            
  /me/cart/{productId}:
    post:
      summary: Achieve a Goal
      description: |
        This endpoint allows you achieve a given goal
      parameters:
        - name: 'productId'
          in: 'query'
          description: The id of the goal to achieve
          required: true
          type: string
      tags:
        - User
      responses:
        '200':
          description: Achievement is successful
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            
            
            
  /me/goals/{id}/challenge/{userId}:
    post:
      summary: Challenge a Goal
      description: |
        This endpoint allows you challenge a user for given goal
      parameters:
        - name: id
          in: path
          description: The id of the goal to achieve
          required: true
          type: string
        - name: userId
          in: path
          description: The id user to challenge
          required: true
          type: string
      tags:
        - User
      responses:
        '200':
          description: Challenge is successful
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /me/goals/{id}/gift/{userId}:
    post:
      summary: Gift a Goal
      description: |
        This endpoint allows you gift a given goal
      parameters:
        - name: id
          in: path
          description: The id of the goal to gift
          required: true
          type: string
        - name: userId
          in: path
          description: The id user to gift the goal to
          required: true
          type: string
      tags:
        - User
      responses:
        '200':
          description: Achievement is successful
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /categories:
    get:
      summary: Categories
      description: >
        Categories define groupings of goals for browsing.
      parameters:
        - name: limit
          in: query
          description: The number of results to limit the search to
          required: false
          type: number
          format: int32
      tags:
        - Categories
      responses:
        '200':
          description: An array of categories
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /categories/{id}/goals:
    get:
      summary: Goals in Category
      description: >
        All the goals in a given category
      parameters:
        - name: id
          in: path
          description: The id of the category to search for goals in.
          required: true
          type: string
      tags:
        - Categories
      responses:
        '200':
          description: An array of goals in the category
          schema:
            type: array
            items:
              $ref: '#/definitions/Goal'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


definitions:
  Brands:
    type: 'object'
    properties:
      id:
        type: 'string'
        description: 'Unique identifier representing a specific brand. For example, Oakley will have a different id than Ray Ban.'
      name:
        type: 'string'
        description: 'Brand name.'

 
  Products:
    type: 'object'
    properties:
      id:
        type: 'string'
        description: 'Unique identifier representing a specific product. For example, Superglasses will have a different product_id than Black Sunglasses.'
      categoryId:
        type: 'string'
        description: 'A linking field that associates a product with a brand. For example, the value in the categoryId field for Superglasses (a product) will match the value in the id field for Oakley (its associated brand).'
      name:
        type: 'string'
        description: 'Display name of product.'
      description:
        type: 'string'
        description: 'Description of product.'
      price:
        type: 'number'
        description: 'Price of product.'
      imageUrls:
        type: 'array'
        description: 'An array of image URLs representing the product.'
        items:
          type: 'string'
          description: 'Image URLs for the product.'


  Cart:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for a goal.
      categoryId:
        type: string
        description: The id of the category this goal belongs to.
      description:
        type: string
        description: Description of product.
      upVotes:
        type: integer
        format: int32
        description: The number of up votes given to a goal
      downVotes:
        type: integer
        format: int32
        description: The number of down votes given to a goal
      imageURL:
        type: string
        description: The URL for the image representing the goal
      dateCreated:
        type: string
        format: date-time
        description: The date the goal was created
        
  User:
    type: object
    properties:
      first_name:
        type: string
        description: First name of the Uber user.
      last_name:
        type: string
        description: Last name of the Uber user.
      email:
        type: string
        description: Email address of the Uber user
      acceptedGoals:
        items:
          $ref: '#/definitions/Goal'
      achievedGoals:
        items:
          $ref: '#/definitions/Goal'
      giftedGoals:
        items:
          $ref: '#/definitions/Goal'    
      challengedGoals:
        items:
          $ref: '#/definitions/Goal'    
          
          
  Error:
    type: 'string'
    properties:
      message:
        type: 'string'